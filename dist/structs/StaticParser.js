"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.staticParser = staticParser;
var _ReadChar = _interopRequireDefault(require("../lib/ReadChar"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function staticParser(reader) {
  const result = {};
  result.smVersion = [];
  for (let i = 0; i < 15; i++) result.smVersion.push((0, _ReadChar.default)(reader));
  result.acVersion = [];
  for (let i = 0; i < 15; i++) result.acVersion.push((0, _ReadChar.default)(reader));
  result.numberOfSessions = reader.ReadUInt32();
  result.numCars = reader.ReadUInt32();
  result.carModel = [];
  for (let i = 0; i < 33; i++) result.carModel.push((0, _ReadChar.default)(reader));
  result.track = [];
  for (let i = 0; i < 33; i++) result.track.push((0, _ReadChar.default)(reader));
  result.playerName = [];
  for (let i = 0; i < 33; i++) result.playerName.push((0, _ReadChar.default)(reader));
  result.playerSurname = [];
  for (let i = 0; i < 33; i++) result.playerSurname.push((0, _ReadChar.default)(reader));
  result.playerNick = [];
  for (let i = 0; i < 34; i++) result.playerNick.push((0, _ReadChar.default)(reader));
  result.sectorCount = reader.ReadUInt32();
  const maxTorque = reader.ReadFloat();
  const maxPower = reader.ReadFloat();
  result.maxRpm = reader.ReadUInt32();
  result.maxFuel = reader.ReadFloat();
  const suspensionMaxTravel = [];
  for (let i = 0; i < 4; i++) suspensionMaxTravel.push(reader.ReadFloat());
  const tyreRadius = [];
  for (let i = 0; i < 4; i++) tyreRadius.push(reader.ReadFloat());
  const maxTurboBoost = reader.ReadFloat();
  const deprecated_1 = reader.ReadFloat();
  const deprecated_2 = reader.ReadFloat();
  result.penaltiesEnabled = reader.ReadUInt32() > 0;
  result.aidFuelRate = reader.ReadFloat();
  result.aidTireRate = reader.ReadFloat();
  result.aidMechanicalDamage = reader.ReadFloat();
  result.AllowTyreBlankets = reader.ReadFloat() > 0;
  result.aidStability = reader.ReadFloat() > 0;
  result.aidAutoclutch = reader.ReadUInt32() > 0;
  result.aidAutoBlip = reader.ReadUInt32() > 0;
  const hasDRS = reader.ReadUInt32() > 0;
  const hasERS = reader.ReadUInt32() > 0;
  const hasKERS = reader.ReadUInt32() > 0;
  const kersMaxJ = reader.ReadFloat();
  const engineBrakeSettingsCount = reader.ReadUInt32();
  const ersPowerControllerCount = reader.ReadUInt32();
  const trackSplineLength = reader.ReadFloat();
  const trackConfiguration = [];
  for (let i = 0; i < 34; i++) trackConfiguration.push((0, _ReadChar.default)(reader));
  const ersMaxJ = reader.ReadFloat();
  const isTimedRace = reader.ReadUInt32() > 0;
  const hasExtraLap = reader.ReadUInt32() > 0;
  const carSkin = [];
  for (let i = 0; i < 34; i++) carSkin.push((0, _ReadChar.default)(reader));
  const reversedGridPositions = reader.ReadUInt32();
  result.PitWindowStart = reader.ReadUInt32();
  result.PitWindowEnd = reader.ReadInt32();
  result.isOnline = reader.ReadUInt32() > 0;
  result.dryTyresName = [];
  for (let i = 0; i < 33; i++) result.dryTyresName.push((0, _ReadChar.default)(reader));
  result.wetTyresName = [];
  for (let i = 0; i < 33; i++) result.wetTyresName.push((0, _ReadChar.default)(reader));
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUmVhZENoYXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInN0YXRpY1BhcnNlciIsInJlYWRlciIsInJlc3VsdCIsInNtVmVyc2lvbiIsImkiLCJwdXNoIiwiUmVhZENoYXIiLCJhY1ZlcnNpb24iLCJudW1iZXJPZlNlc3Npb25zIiwiUmVhZFVJbnQzMiIsIm51bUNhcnMiLCJjYXJNb2RlbCIsInRyYWNrIiwicGxheWVyTmFtZSIsInBsYXllclN1cm5hbWUiLCJwbGF5ZXJOaWNrIiwic2VjdG9yQ291bnQiLCJtYXhUb3JxdWUiLCJSZWFkRmxvYXQiLCJtYXhQb3dlciIsIm1heFJwbSIsIm1heEZ1ZWwiLCJzdXNwZW5zaW9uTWF4VHJhdmVsIiwidHlyZVJhZGl1cyIsIm1heFR1cmJvQm9vc3QiLCJkZXByZWNhdGVkXzEiLCJkZXByZWNhdGVkXzIiLCJwZW5hbHRpZXNFbmFibGVkIiwiYWlkRnVlbFJhdGUiLCJhaWRUaXJlUmF0ZSIsImFpZE1lY2hhbmljYWxEYW1hZ2UiLCJBbGxvd1R5cmVCbGFua2V0cyIsImFpZFN0YWJpbGl0eSIsImFpZEF1dG9jbHV0Y2giLCJhaWRBdXRvQmxpcCIsImhhc0RSUyIsImhhc0VSUyIsImhhc0tFUlMiLCJrZXJzTWF4SiIsImVuZ2luZUJyYWtlU2V0dGluZ3NDb3VudCIsImVyc1Bvd2VyQ29udHJvbGxlckNvdW50IiwidHJhY2tTcGxpbmVMZW5ndGgiLCJ0cmFja0NvbmZpZ3VyYXRpb24iLCJlcnNNYXhKIiwiaXNUaW1lZFJhY2UiLCJoYXNFeHRyYUxhcCIsImNhclNraW4iLCJyZXZlcnNlZEdyaWRQb3NpdGlvbnMiLCJQaXRXaW5kb3dTdGFydCIsIlBpdFdpbmRvd0VuZCIsIlJlYWRJbnQzMiIsImlzT25saW5lIiwiZHJ5VHlyZXNOYW1lIiwid2V0VHlyZXNOYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvU3RhdGljUGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFkQ2hhciBmcm9tIFwiQC9saWIvUmVhZENoYXJcIjtcclxuaW1wb3J0IHsgU3RhdGljUmVzdWx0IH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RhdGljUGFyc2VyKHJlYWRlcikge1xyXG4gIGNvbnN0IHJlc3VsdDogUGFydGlhbDxTdGF0aWNSZXN1bHQ+ID0ge307XHJcblxyXG4gIHJlc3VsdC5zbVZlcnNpb24gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE1OyBpKyspIHJlc3VsdC5zbVZlcnNpb24ucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgcmVzdWx0LmFjVmVyc2lvbiA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTU7IGkrKykgcmVzdWx0LmFjVmVyc2lvbi5wdXNoKFJlYWRDaGFyKHJlYWRlcikpO1xyXG5cclxuICByZXN1bHQubnVtYmVyT2ZTZXNzaW9ucyA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcblxyXG4gIHJlc3VsdC5udW1DYXJzID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuXHJcbiAgcmVzdWx0LmNhck1vZGVsID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMzsgaSsrKSByZXN1bHQuY2FyTW9kZWwucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgcmVzdWx0LnRyYWNrID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMzsgaSsrKSByZXN1bHQudHJhY2sucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgcmVzdWx0LnBsYXllck5hbWUgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDMzOyBpKyspIHJlc3VsdC5wbGF5ZXJOYW1lLnB1c2goUmVhZENoYXIocmVhZGVyKSk7XHJcblxyXG4gIHJlc3VsdC5wbGF5ZXJTdXJuYW1lID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMzsgaSsrKSByZXN1bHQucGxheWVyU3VybmFtZS5wdXNoKFJlYWRDaGFyKHJlYWRlcikpO1xyXG5cclxuICByZXN1bHQucGxheWVyTmljayA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzQ7IGkrKykgcmVzdWx0LnBsYXllck5pY2sucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgcmVzdWx0LnNlY3RvckNvdW50ID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICBjb25zdCBtYXhUb3JxdWUgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgbWF4UG93ZXIgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0Lm1heFJwbSA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgcmVzdWx0Lm1heEZ1ZWwgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcblxyXG4gIGNvbnN0IHN1c3BlbnNpb25NYXhUcmF2ZWw6IG51bWJlcltdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHN1c3BlbnNpb25NYXhUcmF2ZWwucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICBjb25zdCB0eXJlUmFkaXVzOiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB0eXJlUmFkaXVzLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgY29uc3QgbWF4VHVyYm9Cb29zdCA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICBjb25zdCBkZXByZWNhdGVkXzEgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgZGVwcmVjYXRlZF8yID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG5cclxuICByZXN1bHQucGVuYWx0aWVzRW5hYmxlZCA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG4gIHJlc3VsdC5haWRGdWVsUmF0ZSA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICByZXN1bHQuYWlkVGlyZVJhdGUgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LmFpZE1lY2hhbmljYWxEYW1hZ2UgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LkFsbG93VHlyZUJsYW5rZXRzID0gcmVhZGVyLlJlYWRGbG9hdCgpID4gMDtcclxuICByZXN1bHQuYWlkU3RhYmlsaXR5ID0gcmVhZGVyLlJlYWRGbG9hdCgpID4gMDtcclxuICByZXN1bHQuYWlkQXV0b2NsdXRjaCA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG4gIHJlc3VsdC5haWRBdXRvQmxpcCA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG5cclxuICBjb25zdCBoYXNEUlMgPSByZWFkZXIuUmVhZFVJbnQzMigpID4gMDtcclxuICBjb25zdCBoYXNFUlMgPSByZWFkZXIuUmVhZFVJbnQzMigpID4gMDtcclxuICBjb25zdCBoYXNLRVJTID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgY29uc3Qga2Vyc01heEogPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgZW5naW5lQnJha2VTZXR0aW5nc0NvdW50ID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICBjb25zdCBlcnNQb3dlckNvbnRyb2xsZXJDb3VudCA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgY29uc3QgdHJhY2tTcGxpbmVMZW5ndGggPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcblxyXG4gIGNvbnN0IHRyYWNrQ29uZmlndXJhdGlvbjogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM0OyBpKyspIHRyYWNrQ29uZmlndXJhdGlvbi5wdXNoKFJlYWRDaGFyKHJlYWRlcikpO1xyXG5cclxuICBjb25zdCBlcnNNYXhKID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIGNvbnN0IGlzVGltZWRSYWNlID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgY29uc3QgaGFzRXh0cmFMYXAgPSByZWFkZXIuUmVhZFVJbnQzMigpID4gMDtcclxuXHJcbiAgY29uc3QgY2FyU2tpbjogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM0OyBpKyspIGNhclNraW4ucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgY29uc3QgcmV2ZXJzZWRHcmlkUG9zaXRpb25zID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICByZXN1bHQuUGl0V2luZG93U3RhcnQgPSByZWFkZXIuUmVhZFVJbnQzMigpO1xyXG4gIHJlc3VsdC5QaXRXaW5kb3dFbmQgPSByZWFkZXIuUmVhZEludDMyKCk7XHJcbiAgcmVzdWx0LmlzT25saW5lID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcblxyXG4gIHJlc3VsdC5kcnlUeXJlc05hbWUgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDMzOyBpKyspIHJlc3VsdC5kcnlUeXJlc05hbWUucHVzaChSZWFkQ2hhcihyZWFkZXIpKTtcclxuXHJcbiAgcmVzdWx0LndldFR5cmVzTmFtZSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzM7IGkrKykgcmVzdWx0LndldFR5cmVzTmFtZS5wdXNoKFJlYWRDaGFyKHJlYWRlcikpO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQXNDLFNBQUFELHVCQUFBRSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBRy9CLFNBQVNHLFlBQVlBLENBQUNDLE1BQU0sRUFBRTtFQUNuQyxNQUFNQyxNQUE2QixHQUFHLENBQUMsQ0FBQztFQUV4Q0EsTUFBTSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtFQUNyQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUVBLENBQUMsRUFBRSxFQUFFRixNQUFNLENBQUNDLFNBQVMs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