"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.physicsParser = physicsParser;
function physicsParser(reader) {
  const result = {};
  result.packetId = reader.ReadUInt32();
  result.gas = reader.ReadFloat();
  result.brake = reader.ReadFloat();
  result.fuel = reader.ReadFloat();
  result.gear = reader.ReadUInt32() - 1;
  result.rpms = reader.ReadUInt32();
  result.steerAngle = reader.ReadFloat();
  result.speedKmh = reader.ReadFloat();
  result.velocity = [];
  for (let i = 0; i < 3; i++) result.velocity.push(reader.ReadFloat());
  result.accG = [];
  for (let i = 0; i < 3; i++) result.accG.push(reader.ReadFloat());
  result.wheelSlip = [];
  for (let i = 0; i < 4; i++) result.wheelSlip.push(reader.ReadFloat());
  const wheelLoad = [];
  for (let i = 0; i < 4; i++) wheelLoad.push(reader.ReadFloat());
  result.wheelPressure = [];
  for (let i = 0; i < 4; i++) result.wheelPressure.push(reader.ReadFloat());
  result.wheelAngularSpeed = [];
  for (let i = 0; i < 4; i++) result.wheelAngularSpeed.push(reader.ReadFloat());
  result.tyreWear = [];
  for (let i = 0; i < 4; i++) result.tyreWear.push(reader.ReadFloat());
  result.tyreDirtyLevel = [];
  for (let i = 0; i < 4; i++) result.tyreDirtyLevel.push(reader.ReadFloat());
  result.TyreCoreTemp = [];
  for (let i = 0; i < 4; i++) result.TyreCoreTemp.push(reader.ReadFloat());
  const camberRAD = [];
  for (let i = 0; i < 4; i++) camberRAD.push(reader.ReadFloat());
  result.suspensionTravel = [];
  for (let i = 0; i < 4; i++) result.suspensionTravel.push(reader.ReadFloat());
  const drs = reader.ReadFloat();
  result.tc = reader.ReadFloat();
  result.heading = reader.ReadFloat();
  result.pitch = reader.ReadFloat();
  result.roll = reader.ReadFloat();
  const cgHeight = reader.ReadFloat();
  result.carDamage = [];
  for (let i = 0; i < 5; i++) result.carDamage.push(reader.ReadFloat());
  const numberOfTyresOut = reader.ReadUInt32();
  result.pitLimiterOn = reader.ReadUInt32() > 0;
  result.abs = reader.ReadFloat();
  const kersChange = reader.ReadFloat();
  const kersInput = reader.ReadFloat();
  result.autoshifterOn = reader.ReadUInt32() > 0;
  const rideHeight = [];
  for (let i = 0; i < 2; i++) rideHeight.push(reader.ReadFloat());
  result.turboBoost = reader.ReadFloat();
  const ballast = reader.ReadFloat();
  const airDensity = reader.ReadFloat();
  result.airTemp = reader.ReadFloat();
  result.roadTemp = reader.ReadFloat();
  result.localAngularVel = [];
  for (let i = 0; i < 3; i++) result.localAngularVel.push(reader.ReadFloat());
  result.finalFF = reader.ReadFloat();
  const performanceMeter = reader.ReadFloat();
  const engineBrake = reader.ReadUInt32();
  const ersRecoveryLevel = reader.ReadUInt32();
  const ersPowerLevel = reader.ReadUInt32();
  const ersHeatCharging = reader.ReadUInt32();
  const ersIsCharging = reader.ReadUInt32() > 0;
  result.kersCurrentKJ = reader.ReadFloat();
  const drsAvailable = reader.ReadUInt32() > 0;
  const drsEnabled = reader.ReadUInt32() > 0;
  result.brakeTemp = [];
  for (let i = 0; i < 4; i++) result.brakeTemp.push(reader.ReadFloat());
  result.clutch = reader.ReadFloat();
  const tyreTempI = [];
  for (let i = 0; i < 4; i++) tyreTempI.push(reader.ReadFloat());
  const tyreTempM = [];
  for (let i = 0; i < 4; i++) tyreTempM.push(reader.ReadFloat());
  const tyreTempO = [];
  for (let i = 0; i < 4; i++) tyreTempO.push(reader.ReadFloat());
  result.isAIControlled = reader.ReadUInt32() > 0;
  result.tyreContactPoint = [];
  for (let i = 0; i < 4; i++) {
    const arr = [];
    for (let j = 0; j < 3; j++) arr.push(reader.ReadFloat());
    result.tyreContactPoint.push(arr);
  }
  result.tyreContactNormal = [];
  for (let i = 0; i < 4; i++) {
    const arr = [];
    for (let j = 0; j < 3; j++) arr.push(reader.ReadFloat());
    result.tyreContactNormal.push(arr);
  }
  result.tyreContactHeading = [];
  for (let i = 0; i < 4; i++) {
    const arr = [];
    for (let j = 0; j < 3; j++) arr.push(reader.ReadFloat());
    result.tyreContactHeading.push(arr);
  }
  result.brakeBias = reader.ReadFloat();
  result.localVelocity = [];
  for (let i = 0; i < 3; i++) result.localVelocity.push(reader.ReadFloat());
  const P2PActivation = reader.ReadUInt32();
  const P2PStatus = reader.ReadUInt32();
  const currentMaxRpm = reader.ReadFloat();
  const mz = [];
  for (let i = 0; i < 4; i++) mz.push(reader.ReadFloat());
  const fx = [];
  for (let i = 0; i < 4; i++) fx.push(reader.ReadFloat());
  const fy = [];
  for (let i = 0; i < 4; i++) fy.push(reader.ReadFloat());
  result.slipRatio = [];
  for (let i = 0; i < 4; i++) result.slipRatio.push(reader.ReadFloat());
  result.slipAngle = [];
  for (let i = 0; i < 4; i++) result.slipAngle.push(reader.ReadFloat());
  const tcinAction = reader.ReadUInt32();
  const absInAction = reader.ReadUInt32();
  const suspensionDamage = [];
  for (let i = 0; i < 4; i++) suspensionDamage.push(reader.ReadFloat());
  const tyreTemp = [];
  for (let i = 0; i < 4; i++) tyreTemp.push(reader.ReadFloat());
  result.waterTemp = reader.ReadFloat();
  result.brakePressure = [];
  for (let i = 0; i < 4; i++) result.brakePressure.push(reader.ReadFloat());
  result.frontBrakeCompound = reader.ReadUInt32();
  result.rearBrakeCompound = reader.ReadUInt32();
  result.padLife = [];
  for (let i = 0; i < 4; i++) result.padLife.push(reader.ReadFloat());
  result.discLife = [];
  for (let i = 0; i < 4; i++) result.discLife.push(reader.ReadFloat());
  result.ignitionOn = reader.ReadUInt32() > 0;
  result.starterEngineOn = reader.ReadUInt32() > 0;
  result.isEngineRunning = reader.ReadUInt32() > 0;
  result.kerbVibration = reader.ReadFloat();
  result.slipVibrations = reader.ReadFloat();
  result.gVibrations = reader.ReadFloat();
  result.absVibrations = reader.ReadFloat();
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaHlzaWNzUGFyc2VyIiwicmVhZGVyIiwicmVzdWx0IiwicGFja2V0SWQiLCJSZWFkVUludDMyIiwiZ2FzIiwiUmVhZEZsb2F0IiwiYnJha2UiLCJmdWVsIiwiZ2VhciIsInJwbXMiLCJzdGVlckFuZ2xlIiwic3BlZWRLbWgiLCJ2ZWxvY2l0eSIsImkiLCJwdXNoIiwiYWNjRyIsIndoZWVsU2xpcCIsIndoZWVsTG9hZCIsIndoZWVsUHJlc3N1cmUiLCJ3aGVlbEFuZ3VsYXJTcGVlZCIsInR5cmVXZWFyIiwidHlyZURpcnR5TGV2ZWwiLCJUeXJlQ29yZVRlbXAiLCJjYW1iZXJSQUQiLCJzdXNwZW5zaW9uVHJhdmVsIiwiZHJzIiwidGMiLCJoZWFkaW5nIiwicGl0Y2giLCJyb2xsIiwiY2dIZWlnaHQiLCJjYXJEYW1hZ2UiLCJudW1iZXJPZlR5cmVzT3V0IiwicGl0TGltaXRlck9uIiwiYWJzIiwia2Vyc0NoYW5nZSIsImtlcnNJbnB1dCIsImF1dG9zaGlmdGVyT24iLCJyaWRlSGVpZ2h0IiwidHVyYm9Cb29zdCIsImJhbGxhc3QiLCJhaXJEZW5zaXR5IiwiYWlyVGVtcCIsInJvYWRUZW1wIiwibG9jYWxBbmd1bGFyVmVsIiwiZmluYWxGRiIsInBlcmZvcm1hbmNlTWV0ZXIiLCJlbmdpbmVCcmFrZSIsImVyc1JlY292ZXJ5TGV2ZWwiLCJlcnNQb3dlckxldmVsIiwiZXJzSGVhdENoYXJnaW5nIiwiZXJzSXNDaGFyZ2luZyIsImtlcnNDdXJyZW50S0oiLCJkcnNBdmFpbGFibGUiLCJkcnNFbmFibGVkIiwiYnJha2VUZW1wIiwiY2x1dGNoIiwidHlyZVRlbXBJIiwidHlyZVRlbXBNIiwidHlyZVRlbXBPIiwiaXNBSUNvbnRyb2xsZWQiLCJ0eXJlQ29udGFjdFBvaW50IiwiYXJyIiwiaiIsInR5cmVDb250YWN0Tm9ybWFsIiwidHlyZUNvbnRhY3RIZWFkaW5nIiwiYnJha2VCaWFzIiwibG9jYWxWZWxvY2l0eSIsIlAyUEFjdGl2YXRpb24iLCJQMlBTdGF0dXMiLCJjdXJyZW50TWF4UnBtIiwibXoiLCJmeCIsImZ5Iiwic2xpcFJhdGlvIiwic2xpcEFuZ2xlIiwidGNpbkFjdGlvbiIsImFic0luQWN0aW9uIiwic3VzcGVuc2lvbkRhbWFnZSIsInR5cmVUZW1wIiwid2F0ZXJUZW1wIiwiYnJha2VQcmVzc3VyZSIsImZyb250QnJha2VDb21wb3VuZCIsInJlYXJCcmFrZUNvbXBvdW5kIiwicGFkTGlmZSIsImRpc2NMaWZlIiwiaWduaXRpb25PbiIsInN0YXJ0ZXJFbmdpbmVPbiIsImlzRW5naW5lUnVubmluZyIsImtlcmJWaWJyYXRpb24iLCJzbGlwVmlicmF0aW9ucyIsImdWaWJyYXRpb25zIiwiYWJzVmlicmF0aW9ucyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL1BoeXNpY3NQYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGh5c2ljc1Jlc3VsdCB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBoeXNpY3NQYXJzZXIocmVhZGVyKSB7XHJcbiAgY29uc3QgcmVzdWx0OiBQYXJ0aWFsPFBoeXNpY3NSZXN1bHQ+ID0ge307XHJcblxyXG4gIHJlc3VsdC5wYWNrZXRJZCA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgcmVzdWx0LmdhcyA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICByZXN1bHQuYnJha2UgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LmZ1ZWwgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LmdlYXIgPSByZWFkZXIuUmVhZFVJbnQzMigpIC0gMTtcclxuICByZXN1bHQucnBtcyA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgcmVzdWx0LnN0ZWVyQW5nbGUgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LnNwZWVkS21oID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG5cclxuICByZXN1bHQudmVsb2NpdHkgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykgcmVzdWx0LnZlbG9jaXR5LnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LmFjY0cgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykgcmVzdWx0LmFjY0cucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQud2hlZWxTbGlwID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHJlc3VsdC53aGVlbFNsaXAucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICBjb25zdCB3aGVlbExvYWQ6IG51bWJlcltdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHdoZWVsTG9hZC5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIHJlc3VsdC53aGVlbFByZXNzdXJlID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHJlc3VsdC53aGVlbFByZXNzdXJlLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LndoZWVsQW5ndWxhclNwZWVkID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHJlc3VsdC53aGVlbEFuZ3VsYXJTcGVlZC5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIHJlc3VsdC50eXJlV2VhciA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSByZXN1bHQudHlyZVdlYXIucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQudHlyZURpcnR5TGV2ZWwgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgcmVzdWx0LnR5cmVEaXJ0eUxldmVsLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LlR5cmVDb3JlVGVtcCA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSByZXN1bHQuVHlyZUNvcmVUZW1wLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgY29uc3QgY2FtYmVyUkFEOiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSBjYW1iZXJSQUQucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQuc3VzcGVuc2lvblRyYXZlbCA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSByZXN1bHQuc3VzcGVuc2lvblRyYXZlbC5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IGRycyA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICByZXN1bHQudGMgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LmhlYWRpbmcgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LnBpdGNoID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIHJlc3VsdC5yb2xsID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIGNvbnN0IGNnSGVpZ2h0ID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG5cclxuICByZXN1bHQuY2FyRGFtYWdlID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHJlc3VsdC5jYXJEYW1hZ2UucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICBjb25zdCBudW1iZXJPZlR5cmVzT3V0ID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICByZXN1bHQucGl0TGltaXRlck9uID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgcmVzdWx0LmFicyA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICBjb25zdCBrZXJzQ2hhbmdlID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIGNvbnN0IGtlcnNJbnB1dCA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICByZXN1bHQuYXV0b3NoaWZ0ZXJPbiA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG5cclxuICBjb25zdCByaWRlSGVpZ2h0OiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSByaWRlSGVpZ2h0LnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LnR1cmJvQm9vc3QgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgYmFsbGFzdCA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICBjb25zdCBhaXJEZW5zaXR5ID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIHJlc3VsdC5haXJUZW1wID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIHJlc3VsdC5yb2FkVGVtcCA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuXHJcbiAgcmVzdWx0LmxvY2FsQW5ndWxhclZlbCA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSByZXN1bHQubG9jYWxBbmd1bGFyVmVsLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LmZpbmFsRkYgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgcGVyZm9ybWFuY2VNZXRlciA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICBjb25zdCBlbmdpbmVCcmFrZSA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgY29uc3QgZXJzUmVjb3ZlcnlMZXZlbCA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgY29uc3QgZXJzUG93ZXJMZXZlbCA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgY29uc3QgZXJzSGVhdENoYXJnaW5nID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICBjb25zdCBlcnNJc0NoYXJnaW5nID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgcmVzdWx0LmtlcnNDdXJyZW50S0ogPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgY29uc3QgZHJzQXZhaWxhYmxlID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgY29uc3QgZHJzRW5hYmxlZCA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG5cclxuICByZXN1bHQuYnJha2VUZW1wID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHJlc3VsdC5icmFrZVRlbXAucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQuY2x1dGNoID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG5cclxuICBjb25zdCB0eXJlVGVtcEk6IG51bWJlcltdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHR5cmVUZW1wSS5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IHR5cmVUZW1wTTogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgdHlyZVRlbXBNLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgY29uc3QgdHlyZVRlbXBPOiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB0eXJlVGVtcE8ucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQuaXNBSUNvbnRyb2xsZWQgPSByZWFkZXIuUmVhZFVJbnQzMigpID4gMDtcclxuXHJcbiAgcmVzdWx0LnR5cmVDb250YWN0UG9pbnQgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgY29uc3QgYXJyOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyBqKyspIGFyci5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gICAgcmVzdWx0LnR5cmVDb250YWN0UG9pbnQucHVzaChhcnIpO1xyXG4gIH1cclxuXHJcbiAgcmVzdWx0LnR5cmVDb250YWN0Tm9ybWFsID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgIGNvbnN0IGFycjogbnVtYmVyW10gPSBbXTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSBhcnIucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICAgIHJlc3VsdC50eXJlQ29udGFjdE5vcm1hbC5wdXNoKGFycik7XHJcbiAgfVxyXG5cclxuICByZXN1bHQudHlyZUNvbnRhY3RIZWFkaW5nID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgIGNvbnN0IGFycjogbnVtYmVyW10gPSBbXTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSBhcnIucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICAgIHJlc3VsdC50eXJlQ29udGFjdEhlYWRpbmcucHVzaChhcnIpO1xyXG4gIH1cclxuXHJcbiAgcmVzdWx0LmJyYWtlQmlhcyA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuXHJcbiAgcmVzdWx0LmxvY2FsVmVsb2NpdHkgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykgcmVzdWx0LmxvY2FsVmVsb2NpdHkucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICBjb25zdCBQMlBBY3RpdmF0aW9uID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuICBjb25zdCBQMlBTdGF0dXMgPSByZWFkZXIuUmVhZFVJbnQzMigpO1xyXG4gIGNvbnN0IGN1cnJlbnRNYXhScG0gPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcblxyXG4gIGNvbnN0IG16OiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSBtei5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IGZ4OiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSBmeC5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IGZ5OiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSBmeS5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIHJlc3VsdC5zbGlwUmF0aW8gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgcmVzdWx0LnNsaXBSYXRpby5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIHJlc3VsdC5zbGlwQW5nbGUgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgcmVzdWx0LnNsaXBBbmdsZS5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IHRjaW5BY3Rpb24gPSByZWFkZXIuUmVhZFVJbnQzMigpO1xyXG4gIGNvbnN0IGFic0luQWN0aW9uID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuXHJcbiAgY29uc3Qgc3VzcGVuc2lvbkRhbWFnZTogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgc3VzcGVuc2lvbkRhbWFnZS5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIGNvbnN0IHR5cmVUZW1wOiBudW1iZXJbXSA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB0eXJlVGVtcC5wdXNoKHJlYWRlci5SZWFkRmxvYXQoKSk7XHJcblxyXG4gIHJlc3VsdC53YXRlclRlbXAgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcblxyXG4gIHJlc3VsdC5icmFrZVByZXNzdXJlID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHJlc3VsdC5icmFrZVByZXNzdXJlLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0LmZyb250QnJha2VDb21wb3VuZCA9IHJlYWRlci5SZWFkVUludDMyKCk7XHJcbiAgcmVzdWx0LnJlYXJCcmFrZUNvbXBvdW5kID0gcmVhZGVyLlJlYWRVSW50MzIoKTtcclxuXHJcbiAgcmVzdWx0LnBhZExpZmUgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgcmVzdWx0LnBhZExpZmUucHVzaChyZWFkZXIuUmVhZEZsb2F0KCkpO1xyXG5cclxuICByZXN1bHQuZGlzY0xpZmUgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykgcmVzdWx0LmRpc2NMaWZlLnB1c2gocmVhZGVyLlJlYWRGbG9hdCgpKTtcclxuXHJcbiAgcmVzdWx0Lmlnbml0aW9uT24gPSByZWFkZXIuUmVhZFVJbnQzMigpID4gMDtcclxuICByZXN1bHQuc3RhcnRlckVuZ2luZU9uID0gcmVhZGVyLlJlYWRVSW50MzIoKSA+IDA7XHJcbiAgcmVzdWx0LmlzRW5naW5lUnVubmluZyA9IHJlYWRlci5SZWFkVUludDMyKCkgPiAwO1xyXG5cclxuICByZXN1bHQua2VyYlZpYnJhdGlvbiA9IHJlYWRlci5SZWFkRmxvYXQoKTtcclxuICByZXN1bHQuc2xpcFZpYnJhdGlvbnMgPSByZWFkZXIuUmVhZEZsb2F0KCk7XHJcbiAgcmVzdWx0LmdWaWJyYXRpb25zID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG4gIHJlc3VsdC5hYnNWaWJyYXRpb25zID0gcmVhZGVyLlJlYWRGbG9hdCgpO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRU8sU0FBU0EsYUFBYUEsQ0FBQ0MsTUFBTSxFQUFFO0VBQ3BDLE1BQU1DLE1BQThCLEdBQUcsQ0FBQyxDQUFDO0VBRXpDQSxNQUFNLENBQUNDLFFBQVEsR0FBR0YsTUFBTSxDQUFDRyxVQUFVLENBQUMsQ0FBQztFQUNyQ0YsTUFBTSxDQUFDRyxHQUFHLEdBQUdKLE1BQU0sQ0FBQ0ssU0FBUyxDQUFDLENBQUM7RUFDL0JKLE1BQU0sQ0FBQ0ssS0FBSyxHQUFHTixNQUFNLENBQUNLLFNBQVMsQ0FBQyxDQUFDO0VBQ2pDSixNQUFNLENBQUNNLElBQUksR0FBR1AsTUFBTSxDQUFDSyxTQUFTLENBQUMsQ0FB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