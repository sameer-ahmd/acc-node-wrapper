"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":[],"sources":["../src/types.ts"],"sourcesContent":["import { CarLocationEnum } from \"./enums\";\r\n\r\nexport interface PhysicsResult {\r\n  packetId: number;\r\n  gas: number;\r\n  brake: number;\r\n  fuel: number;\r\n  gear: number;\r\n  rpms: number;\r\n  steerAngle: number;\r\n  speedKmh: number;\r\n  velocity: number[];\r\n  accG: number[];\r\n  wheelSlip: number[];\r\n  wheelPressure: number[];\r\n  wheelAngularSpeed: number[];\r\n  TyreCoreTemp: number[];\r\n  suspensionTravel: number[];\r\n  tc: number;\r\n  heading: number;\r\n  pitch: number;\r\n  roll: number;\r\n  carDamage: number[];\r\n  pitLimiterOn: boolean;\r\n  abs: number;\r\n  autoshifterOn: boolean;\r\n  tyreWear: number[];\r\n  tyreDirtyLevel: number[];\r\n  turboBoost: number;\r\n  airTemp: number;\r\n  roadTemp: number;\r\n  localAngularVel: number[];\r\n  finalFF: number;\r\n  kersCurrentKJ: number;\r\n  brakeTemp: number[];\r\n  clutch: number;\r\n  isAIControlled: boolean;\r\n  tyreContactPoint: number[][];\r\n  tyreContactNormal: number[][];\r\n  tyreContactHeading: number[][];\r\n  brakeBias: number;\r\n  localVelocity: number[];\r\n  slipRatio: number[];\r\n  slipAngle: number[];\r\n  waterTemp: number;\r\n  brakePressure: number[];\r\n  frontBrakeCompound: number;\r\n  rearBrakeCompound: number;\r\n  padLife: number[];\r\n  discLife: number[];\r\n  ignitionOn: boolean;\r\n  starterEngineOn: boolean;\r\n  isEngineRunning: boolean;\r\n  kerbVibration: number;\r\n  slipVibrations: number;\r\n  gVibrations: number;\r\n  absVibrations: number;\r\n}\r\n\r\nexport interface GraphicsResult {\r\n  packetId: number;\r\n  status: ACCGameStatus;\r\n  session: SessionType;\r\n  currentTime: string[];\r\n  lastTime: string[];\r\n  bestTime: string[];\r\n  split: string[];\r\n  completedLaps: number;\r\n  position: number;\r\n  iCurrentTime: number;\r\n  iLastTime: number;\r\n  iBestTime: number;\r\n  sessionTimeLeft: number;\r\n  distanceTraveled: number;\r\n  isInPit: boolean;\r\n  currentSectorIndex: number;\r\n  lastSectorTime: number;\r\n  numberOfLaps: number;\r\n  tyreCompound: string[];\r\n  normalizedCarPosition: number;\r\n  activeCars: number;\r\n  carCoordinates: number[][];\r\n  carID: number[];\r\n  playerCarID: number;\r\n  penaltyTime: number;\r\n  flag: FlagType;\r\n  penalty: PenaltyType;\r\n  idealLineOn: boolean;\r\n  isInPitLane: boolean;\r\n  surfaceGrip: number;\r\n  mandatoryPitDone: boolean;\r\n  windSpeed: number;\r\n  windDirection: number;\r\n  isSetupMenuVisible: boolean;\r\n  mainDisplayIndex: number;\r\n  secondaryDisplyIndex: number;\r\n  TC: number;\r\n  TCCUT: number;\r\n  EngineMap: number;\r\n  ABS: number;\r\n  fuelXLap: number;\r\n  rainLights: boolean;\r\n  flashingLights: boolean;\r\n  lightsStage: number;\r\n  exhaustTemperature: number;\r\n  wiperLV: number;\r\n  driverStintTotalTimeLeft: number;\r\n  driverStintTimeLeft: number;\r\n  rainTyres: boolean;\r\n  sessionIndex: number;\r\n  usedFuel: number;\r\n  deltaLapTime: string[];\r\n  iDeltaLapTime: number;\r\n  estimatedLapTime: string[];\r\n  iEstimatedLapTime: number;\r\n  isDeltaPositive: boolean;\r\n  iSplit: number;\r\n  isValidLap: boolean;\r\n  fuelEstimatedLaps: number;\r\n  trackStatus: string[];\r\n  missingMandatoryPits: number;\r\n  Clock: number;\r\n  directionLightsLeft: boolean;\r\n  directionLightsRight: boolean;\r\n  GlobalYellow: boolean;\r\n  GlobalYellow1: boolean;\r\n  GlobalYellow2: boolean;\r\n  GlobalYellow3: boolean;\r\n  GlobalWhite: boolean;\r\n  GlobalGreen: boolean;\r\n  GlobalChequered: boolean;\r\n  GlobalRed: boolean;\r\n  mfdTyreSet: number;\r\n  mfdFuelToAdd: number;\r\n  mfdTyrePressureLF: number;\r\n  mfdTyrePressureRF: number;\r\n  mfdTyrePressureLR: number;\r\n  mfdTyrePressureRR: number;\r\n  trackGripStatus: TrackGrip;\r\n  rainIntensity: RainIntensity;\r\n  rainIntensityIn1numbermin: RainIntensity;\r\n  rainIntensityIn3numbermin: RainIntensity;\r\n  currentTyreSet: number;\r\n  strategyTyreSet: number;\r\n}\r\n\r\nexport interface BroadcastEvent {\r\n  Type: BroadcastEventType;\r\n  Msg: string;\r\n  TimeMs: number;\r\n  CarId: number;\r\n  CarData: CarInformation;\r\n}\r\n\r\nexport interface StaticResult {\r\n  smVersion: string[];\r\n  acVersion: string[];\r\n  numberOfSessions: number;\r\n  numCars: number;\r\n  carModel: string[];\r\n  track: string[];\r\n  playerName: string[];\r\n  playerSurname: string[];\r\n  playerNick: string[];\r\n  sectorCount: number;\r\n  maxRpm: number;\r\n  maxFuel: number;\r\n  penaltiesEnabled: boolean;\r\n  aidFuelRate: number;\r\n  aidTireRate: number;\r\n  aidMechanicalDamage: number;\r\n  AllowTyreBlankets: boolean;\r\n  aidStability: boolean;\r\n  aidAutoclutch: boolean;\r\n  aidAutoBlip: boolean;\r\n  PitWindowStart: number;\r\n  PitWindowEnd: number;\r\n  isOnline: boolean;\r\n  dryTyresName: string[];\r\n  wetTyresName: string[];\r\n}\r\n\r\nexport interface RegistrationResult {\r\n  ConnectionId: number;\r\n  ConnectionSuccess: boolean;\r\n  isReadonly: boolean;\r\n  err: string;\r\n}\r\n\r\nexport interface RealtimeUpdate {\r\n  EventIndex: number;\r\n  SessionIndex: number;\r\n  SessionType: SessionType;\r\n  Phase: SessionPhase;\r\n  SessionTime: number;\r\n  SessionEndTime: number;\r\n  FocusedCarIndex: number;\r\n  ActiveCameraSet: string;\r\n  ActiveCamera: string;\r\n  CurrentHudPage: string;\r\n  IsReplayPlaying: boolean;\r\n  ReplaySessionTime?: number;\r\n  ReplayRemainingTime?: number;\r\n  TimeOfDay: number;\r\n  AmbientTemp: number;\r\n  TrackTemp: number;\r\n  Clouds: number;\r\n  RainLevel: number;\r\n  Wetness: number;\r\n  BestSessionLap: Partial<LapData>;\r\n}\r\n\r\nexport interface LapData {\r\n  Splits: number[];\r\n  LaptimeMS: number;\r\n  CarIndex: number;\r\n  DriverIndex: number;\r\n  IsInvalid: boolean;\r\n  IsValidForBest: boolean;\r\n  isOutlap: boolean;\r\n  isInlap: boolean;\r\n  Type: number;\r\n}\r\n\r\nexport interface CarInformation {\r\n  CarIndex: number;\r\n  CarModelType: number;\r\n  TeamName: string;\r\n  RaceNumber: number;\r\n  CupCategory: number;\r\n  CurrentDriverIndex: number;\r\n  Drivers: string[];\r\n  Nationality: string;\r\n}\r\n\r\nexport interface BroadcastOptions {\r\n  /** The name to use when connecting to ACC. `required`*/\r\n  name: string;\r\n  /** The password to use when connecting to ACC.  `required`*/\r\n  password: string;\r\n  /** The command Password to use when connecting to ACC.  `default \"\"` */\r\n  cmdPassword?: string;\r\n  /** The command Password to use when connecting to ACC.  `default 9numbernumbernumber` */\r\n  port?: number;\r\n  /** The local network IP if you are running the game on a different PC to this program.  `default localhost` */\r\n  address?: string;\r\n  /** How often to request an update from ACC.  `default 25numberms` */\r\n  updateMS?: number;\r\n  /** Log response to console `default boolean`*/\r\n  logging?: boolean;\r\n}\r\n\r\nexport interface SharedMemoryOptions {\r\n  physicsUpdateInt?: number;\r\n  graphicsUpdateInt?: number;\r\n  staticUpdateInt?: number;\r\n  logging?: boolean;\r\n}\r\n\r\nexport interface AsServerOptions extends BroadcastOptions {\r\n  /** Forward the UDP binaries to another address on your network */\r\n  forwardAddresses?: NetworkAddress[];\r\n  /** Skip parsing of packets on this computer */\r\n  forwardOnly?: boolean;\r\n  physicsUpdate?: number;\r\n  graphicsUpdate?: number;\r\n  staticUpdate?: number;\r\n}\r\n\r\nexport interface NetworkAddress {\r\n  address: string;\r\n  port: number;\r\n}\r\n\r\nexport type ACCGameStatus = \"AC_OFF\" | \"AC_REPLAY\" | \"AC_LIVE\" | \"AC_PAUSE\";\r\n\r\nexport type EntryListCars = CarInformation[];\r\n\r\nexport interface RealtimeCarUpdate {\r\n  CarIndex: number;\r\n  DriverIndex: number;\r\n  DriverCount: number;\r\n  Gear: number;\r\n  WorldPosX: number;\r\n  WorldPosY: number;\r\n  Yaw: number;\r\n  CarLocation: CarLocation;\r\n  Kmh: number;\r\n  Position: number;\r\n  CupPosition: number;\r\n  TrackPosition: number;\r\n  SplinePosition: number;\r\n  Laps: number;\r\n  Delta: number;\r\n  BestSessionLap: LapData;\r\n  LastLap: LapData;\r\n  CurrentLap: LapData;\r\n}\r\n\r\nexport type CarLocation =\r\n  | \"None\"\r\n  | \"Track\"\r\n  | \"Pitlane\"\r\n  | \"Pit Entry\"\r\n  | \"Pit Exit\";\r\n\r\nexport type SessionType =\r\n  | \"AC_UNKNOWN\"\r\n  | \"AC_PRACTICE\"\r\n  | \"AC_QUALIFY\"\r\n  | \"AC_RACE\"\r\n  | \"AC_HOTLAP\"\r\n  | \"AC_TIME_ATTACK\"\r\n  | \"AC_DRIFT\"\r\n  | \"AC_DRAG\"\r\n  | \"AC_HOTSTINT\"\r\n  | \"AC_HOTLAPSUPERPOLE\";\r\n\r\nexport type FlagType =\r\n  | \"AC_NO_FLAG\"\r\n  | \"AC_BLUE_FLAG\"\r\n  | \"AC_YELLOW_FLAG\"\r\n  | \"AC_BLACK_FLAG\"\r\n  | \"AC_WHITE_FLAG\"\r\n  | \"AC_CHECKERED_FLAG\"\r\n  | \"AC_PENALTY_FLAG\"\r\n  | \"ACC_GREEN_FLAG\"\r\n  | \"ACC_ORANGE_FLAG\";\r\n\r\nexport type DriverCategory =\r\n  | \"Platinum\"\r\n  | \"Gold\"\r\n  | \"Silver\"\r\n  | \"Bronze\"\r\n  | \"Error\";\r\n\r\nexport type CupCategory =\r\n  | \"Overall/Pro\"\r\n  | \"ProAm\"\r\n  | \"Am\"\r\n  | \"Silver\"\r\n  | \"National\";\r\n\r\nexport type LapType = \"Error\" | \"Outlap\" | \"Regular\" | \"Inlap\";\r\n\r\nexport type SessionPhase =\r\n  | \"None\"\r\n  | \"Starting\"\r\n  | \"PreFormation\"\r\n  | \"FormationLap\"\r\n  | \"PreSession\"\r\n  | \"Session\"\r\n  | \"SessionOver\"\r\n  | \"PostSession\"\r\n  | \"ResultUI\";\r\n\r\nexport type BroadcastEventType =\r\n  | \"None\"\r\n  | \"GreenFlag\"\r\n  | \"SessionOver\"\r\n  | \"PenaltyCommMsg\"\r\n  | \"Accident\"\r\n  | \"LapCompleted\"\r\n  | \"BestSessionLap\"\r\n  | \"BestPersonalLap\";\r\n\r\nexport type Nationality =\r\n  | \"Any\"\r\n  | \"Italy\"\r\n  | \"Germany\"\r\n  | \"France\"\r\n  | \"Spain\"\r\n  | \"GreatBritain\"\r\n  | \"Hungary\"\r\n  | \"Belgium\"\r\n  | \"Switzerland\"\r\n  | \"Austria\"\r\n  | \"Russia\"\r\n  | \"Thailand\"\r\n  | \"Netherlands\"\r\n  | \"Poland\"\r\n  | \"Argentina\"\r\n  | \"Monaco\"\r\n  | \"Ireland\"\r\n  | \"Brazil\"\r\n  | \"SouthAfrica\"\r\n  | \"PuertoRico\"\r\n  | \"Slovakia\"\r\n  | \"Oman\"\r\n  | \"Greece\"\r\n  | \"Saudi Arabia\"\r\n  | \"Norway\"\r\n  | \"Turkey\"\r\n  | \"South Korea\"\r\n  | \"Lebanon\"\r\n  | \"Armenia\"\r\n  | \"Mexico\"\r\n  | \"Sweden\"\r\n  | \"Finland\"\r\n  | \"Denmark\"\r\n  | \"Croatia\"\r\n  | \"Canada\"\r\n  | \"China\"\r\n  | \"Portugal\"\r\n  | \"Singapore\"\r\n  | \"Indonesia\"\r\n  | \"USA\"\r\n  | \"New Zealand\"\r\n  | \"Australia\"\r\n  | \"San Marino\"\r\n  | \"UAE\"\r\n  | \"Luxembourg\"\r\n  | \"Kuwait\"\r\n  | \"Hong Kong\"\r\n  | \"Colombia\"\r\n  | \"Japan\"\r\n  | \"Andorra\"\r\n  | \"Azerbaijan\"\r\n  | \"Bulgaria\"\r\n  | \"Cuba\"\r\n  | \"Czech Republic\"\r\n  | \"Estonia\"\r\n  | \"Georgia\"\r\n  | \"India\"\r\n  | \"Israel\"\r\n  | \"Jamaica\"\r\n  | \"Latvia\"\r\n  | \"Lithuania\"\r\n  | \"Macau\"\r\n  | \"Malaysia\"\r\n  | \"Nepal\"\r\n  | \"New Caledonia\"\r\n  | \"Nigeria\"\r\n  | \"Northern Ireland\"\r\n  | \"Papua New Guinea\"\r\n  | \"Philippines\"\r\n  | \"Qatar\"\r\n  | \"Romania\"\r\n  | \"Scotland\"\r\n  | \"Serbia\"\r\n  | \"Slovenia\"\r\n  | \"Taiwan\"\r\n  | \"Ukraine\"\r\n  | \"Venezuela\"\r\n  | \"Wales\"\r\n  | \"Iran\"\r\n  | \"Bahrain\"\r\n  | \"Zimbabwe\"\r\n  | \"Chinese Taipei\"\r\n  | \"Chile\"\r\n  | \"Uruguay\"\r\n  | \"Madagascar\";\r\n\r\nexport type PenaltyType =\r\n  | \"None\"\r\n  | \"DriveThrough_Cutting\"\r\n  | \"StopAndGo_10_Cutting\"\r\n  | \"StopAndGo_20_Cutting\"\r\n  | \"StopAndGo_30_Cutting\"\r\n  | \"Disqualified_Cutting\"\r\n  | \"RemoveBestLaptime_Cutting\"\r\n  | \"DriveThrough_PitSpeeding\"\r\n  | \"StopAndGo_10_PitSpeeding\"\r\n  | \"StopAndGo_20_PitSpeeding\"\r\n  | \"StopAndGo_30_PitSpeeding\"\r\n  | \"Disqualified_PitSpeeding\"\r\n  | \"RemoveBestLaptime_PitSpeeding\"\r\n  | \"Disqualified_IgnoredMandatoryPit\"\r\n  | \"PostRaceTime\"\r\n  | \"Disqualified_Trolling\"\r\n  | \"Disqualified_PitEntry\"\r\n  | \"Disqualified_PitExit\"\r\n  | \"Disqualified_WrongWay\"\r\n  | \"DriveThrough_IgnoredDriverStint\"\r\n  | \"Disqualified_IgnoredDriverStint\"\r\n  | \"Disqualified_ExceededDriverStintLimit\";\r\n\r\nexport type TrackGrip =\r\n  | \"ACC_GREEN\"\r\n  | \"ACC_FAST\"\r\n  | \"ACC_OPTIMUM\"\r\n  | \"ACC_GREASY\"\r\n  | \"ACC_DAMP\"\r\n  | \"ACC_WET\"\r\n  | \"ACC_FLOODED\";\r\n\r\nexport type RainIntensity =\r\n  | \"ACC_NO_RAIN\"\r\n  | \"ACC_DRIZZLE\"\r\n  | \"ACC_LIGHT_RAIN\"\r\n  | \"ACC_MEDIUM_RAIN\"\r\n  | \"ACC_HEAVY_RAIN\"\r\n  | \"ACC_THUNDERSTORM\";\r\n\r\nexport type WheelType =\r\n  | \"ACC_FrontLeft\"\r\n  | \"ACC_FrontRight\"\r\n  | \"ACC_RearLeft\"\r\n  | \"ACC_RearRight\";\r\n"],"mappings":"","ignoreList":[]}